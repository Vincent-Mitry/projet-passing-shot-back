security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        login:
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login_check
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure 

        api:
            pattern:   ^/api
            stateless: true
            jwt: ~
      
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: app_user_provider

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            form_login:
                # "login" is the name of the route created previously
                login_path: login
                check_path: login

            logout:
                # CoNom de la route name="logout"
                path: logout

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/(login|logout), roles: PUBLIC_ACCESS }
        - { path: ^/api/v1/courts, roles: PUBLIC_ACCESS }
        - { path: ^/api/v1/reservations/available-courts, roles: PUBLIC_ACCESS }
        - { path: ^/api/v1/users, roles: PUBLIC_ACCESS, methods: POST }
        - { path: ^/api,       roles: IS_AUTHENTICATED_FULLY }

        #Back Office routes
        - { path: ^/connexion, roles: PUBLIC_ACCESS }
        - { path: ^/clubs/\d+, roles: ROLE_SUPER_ADMIN, methods: POST }
        - { path: ^/clubs/\d+/modification, roles: ROLE_SUPER_ADMIN, methods: POST }
        - { path: ^/clubs/new, roles: ROLE_SUPER_ADMIN }
        - { path: ^/terrains/ajout, roles: ROLE_SUPER_ADMIN }
        - { path: ^/, roles: ROLE_ADMIN }
        
        #API routes
        - { path: ^/api/v1/(reservations|users)/\d+, roles: ROLE_MEMBER }
        - { path: ^/api/v1/users, roles: ROLE_MEMBER }
        - { path: ^/api/v1/reservations, roles: ROLE_MEMBER, methods: POST }
        

    role_hierarchy:
        #SUPER_ADMIN have at least the same access than ADMIN
        ROLE_SUPER_ADMIN: ROLE_ADMIN
        #ADMIN have at least the same access than MEMBER
        ROLE_ADMIN: ROLE_MEMBER

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.

            App\Entity\User: 'auto'

            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 15 # Lowest possible value for bcrypt
                time_cost: 4 # Lowest possible value for argon
                memory_cost: 15 # Lowest possible value for argon
